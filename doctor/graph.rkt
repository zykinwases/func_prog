#lang scheme/base

(require scheme/string)

(define input "train/full.txt")

(define forward-freq (make-hash))
(define forward-ngramm (make-hash))
(define n 5)

(define (train-graphs file)
  (let ((in (open-input-file file)))
    (let reader ((line (read-line in)))
      (if (eof-object? line) (println "Everything is ready")
          (begin (let ((sentences (parse-line line)))
                   (map add-to-frw-freq sentences)
                   (map add-to-frw-ngramms sentences)
                   )
                 (reader (read-line in))
                 )
          )
      )
    )
  )
  
(define (parse-line line)
  (map (lambda (sent)
         (reverse (cons "." (reverse (filter non-empty-string? (string-split sent #px"\\s*\\b\\s*"))))))
       (string-split line #px"\\.|\\?|!")
       )
  )

(define (add-to-frw-freq sent)
  (let ((n-1-gramm (reverse (make-n-gramm sent (sub1 n)))))
    (if (hash-has-key? forward-freq n-1-gramm)
        (hash-set! forward-freq n-1-gramm (add1 (hash-ref forward-freq n-1-gramm)))
        (hash-set! forward-freq n-1-gramm 1)
        )
   )
  )

(define (add-to-frw-ngramms sent)
  (let ((rev-n-gramm (make-n-gramm sent n)))
    (let ((n-1-gramm (reverse (cdr rev-n-gramm))) (last-word (car rev-n-gramm)))
      (if (hash-has-key? forward-ngramm n-1-gramm)
          (let ((next-words-hash (hash-ref forward-ngramm n-1-gramm)))
            (if (hash-has-key? next-words-hash last-word)
                (hash-set! next-words-hash last-word (add1 (hash-ref next-words-hash last-word)))
                (hash-set! next-words-hash last-word 1)
             )
            )
          (hash-set! forward-ngramm n-1-gramm (make-hash (list (cons last-word 1))))
       )
     )
    )
  )

;перевёрнутая н-грамма
(define (make-n-gramm sent n)
  (let loop ((i n) (cur sent) (res '()))
    (if (or (= i 0) (null? cur)) res
        (loop (sub1 i) (cdr cur) (cons (car cur) res))
     )
   )
  )

(train-graphs input)
(define out (open-output-file "train/res.txt" #:exists 'replace))
(write forward-ngramm out)
(close-output-port out)