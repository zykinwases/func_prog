#lang scheme/base
(require scheme/mpair)
(require math/number-theory)

(define (even-deficient n)
  (let loop ((count n) (cur-i 2) (res '()))
    (if (= count 0) (reverse res)
        (if (> (* 2 cur-i)
               (foldl + 0 (divisors cur-i)))
            (loop (sub1 count) (+ cur-i 2) (cons cur-i res))
            (loop count (+ cur-i 2) res)
            )
        )
    )
  )

(define deficient-table (make-hash (list (cons 1 '(2)))))
(define (next-deficient n)
  (if (> (* 2 n)
         (foldl + 0 (divisors n)))
      n
      (next-deficient (+ n 2))
   )
  )
(define (memo-even-deficient n)
  (let ((res (hash-ref deficient-table n #f)))
    (if res (reverse res)
        (let* ((prev-res (reverse (memo-even-deficient (sub1 n)))) (next-res (cons (next-deficient (+ 2 (car prev-res))) prev-res)))
          (begin
            (hash-set! deficient-table n next-res)
            (reverse next-res)
            )
          )
        )
   )
  )